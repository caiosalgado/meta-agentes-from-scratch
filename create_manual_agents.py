#!/usr/bin/env python3
"""
Criador de Agentes Manuais - Cria hist√≥rico inicial para o meta-agente
"""

from llm_meta_agent import LLM_Meta_Agent

def create_agent_1_simple():
    """Agente 1: Simples e eficiente - esperado alta performance."""
    return """
# AGENTE 1: Simple Expert Solver
from llm_agent import LLM_Agent

def solve_problem(problem_data):
    '''Agente simples com foco em efici√™ncia e precis√£o.'''
    
    # Criar agente especializado
    agent = LLM_Agent(
        role="Python Coding Expert",
        instruction=f'''Voc√™ √© um especialista em Python. 
        
        Resolva este problema de programa√ß√£o:
        {problem_data.get("description", "")}
        
        Retorne apenas c√≥digo Python limpo e eficiente.''',
        arquitetura_resposta={"code": "C√≥digo Python completo"},
        model="ollama:qwen3:32b",
        temperatura=0.2  # Baixa para precis√£o
    )
    
    # Executar e retornar resultado
    return agent.generate_response(problem_data)
"""

def create_agent_2_complex():
    """Agente 2: Pipeline complexo - esperado problemas de performance."""
    return """
# AGENTE 2: Over-engineered Complex Pipeline  
from llm_agent import LLM_Agent

def solve_problem(problem_data):
    '''Pipeline complexo com m√∫ltiplos agentes - pode ter overhead.'''
    
    # AGENTE 1: Analista
    analyst = LLM_Agent(
        role="Problem Analyst", 
        instruction=f'''Analise este problema de programa√ß√£o em detalhes:
        {problem_data.get("description", "")}
        
        Identifique padr√µes, edge cases e estrat√©gias de solu√ß√£o.''',
        arquitetura_resposta={"analysis": "An√°lise detalhada do problema"},
        model="ollama:gemma3:27b",
        temperatura=0.4
    )
    
    analysis_result = analyst.generate_response(problem_data)
    
    # AGENTE 2: Arquiteto
    architect = LLM_Agent(
        role="Solution Architect",
        instruction=f'''Baseado nesta an√°lise: {analysis_result.get("analysis", "")}
        
        Crie uma arquitetura de solu√ß√£o detalhada.''',
        arquitetura_resposta={"architecture": "Arquitetura da solu√ß√£o"},
        model="ollama:qwen3:14b", 
        temperatura=0.5,
        arquitetura_respostas_anteriores=[analysis_result]
    )
    
    architecture_result = architect.generate_response(problem_data)
    
    # AGENTE 3: Implementador
    implementer = LLM_Agent(
        role="Code Implementer",
        instruction=f'''Implemente esta solu√ß√£o:
        An√°lise: {analysis_result.get("analysis", "")}
        Arquitetura: {architecture_result.get("architecture", "")}
        
        C√≥digo Python final:''',
        arquitetura_resposta={"code": "C√≥digo Python implementado"},
        model="ollama:qwen3:32b",
        temperatura=0.3,
        arquitetura_respostas_anteriores=[analysis_result, architecture_result]
    )
    
    return implementer.generate_response(problem_data)
"""

def create_agent_3_debate():
    """Agente 3: Debate entre experts - esperado performance m√©dia."""
    return """
# AGENTE 3: Expert Debate Solver
from llm_agent import LLM_Agent

def solve_problem(problem_data):
    '''Dois experts debatem, um terceiro decide - abordagem intermedi√°ria.'''
    
    # EXPERT 1: Abordagem Algor√≠tmica
    expert1 = LLM_Agent(
        role="Algorithm Expert",
        instruction=f'''Voc√™ √© um especialista em algoritmos. 
        
        Resolva este problema focando em efici√™ncia algor√≠tmica:
        {problem_data.get("description", "")}
        
        Priorize complexidade temporal e espacial.''',
        arquitetura_resposta={"solution": "Solu√ß√£o algor√≠tmica", "reasoning": "Racioc√≠nio"},
        model="ollama:qwen3:30b",
        temperatura=0.3
    )
    
    # EXPERT 2: Abordagem Pr√°tica  
    expert2 = LLM_Agent(
        role="Practical Coder",
        instruction=f'''Voc√™ √© um programador pr√°tico.
        
        Resolva este problema focando em simplicidade e legibilidade:
        {problem_data.get("description", "")}
        
        Priorize c√≥digo limpo e funcionais.''',
        arquitetura_resposta={"solution": "Solu√ß√£o pr√°tica", "reasoning": "Racioc√≠nio"},
        model="ollama:gemma3:12b", 
        temperatura=0.4
    )
    
    # Executar ambos experts
    solution1 = expert1.generate_response(problem_data)
    solution2 = expert2.generate_response(problem_data)
    
    # JUIZ: Decide entre as duas solu√ß√µes
    judge = LLM_Agent(
        role="Technical Judge",
        instruction=f'''Avalie estas duas solu√ß√µes e escolha/combine a melhor:
        
        Solu√ß√£o Algor√≠tmica: {solution1.get("solution", "")}
        Racioc√≠nio 1: {solution1.get("reasoning", "")}
        
        Solu√ß√£o Pr√°tica: {solution2.get("solution", "")}  
        Racioc√≠nio 2: {solution2.get("reasoning", "")}
        
        Retorne a melhor solu√ß√£o final.''',
        arquitetura_resposta={"code": "C√≥digo Python final escolhido"},
        model="ollama:qwen3:32b",
        temperatura=0.2,
        arquitetura_respostas_anteriores=[solution1, solution2]
    )
    
    return judge.generate_response(problem_data)
"""

def main():
    """Fun√ß√£o principal - cria e testa os 3 agentes manuais usando fun√ß√£o centralizada."""
    print("üöÄ CRIANDO AGENTES MANUAIS PARA HIST√ìRICO INICIAL")
    print("="*80)
    
    # Definir os 3 agentes
    agents = [
        {
            "name": "Simple Expert Solver",
            "code": create_agent_1_simple(),
            "description": "Agente simples com foco em efici√™ncia e precis√£o",
            "expected": "Alta performance"
        },
        {
            "name": "Complex Pipeline Solver", 
            "code": create_agent_2_complex(),
            "description": "Pipeline complexo com m√∫ltiplos agentes especializados",
            "expected": "Problemas de performance/overhead"
        },
        {
            "name": "Expert Debate Solver",
            "code": create_agent_3_debate(), 
            "description": "Dois experts debatem, um juiz decide",
            "expected": "Performance intermedi√°ria"
        }
    ]
    
    # Criar meta-agente para usar fun√ß√£o centralizada
    print("üîç Inicializando meta-agente...")
    meta_agent = LLM_Meta_Agent()
    
    # Testar cada agente usando fun√ß√£o centralizada
    results = []
    for i, agent_config in enumerate(agents):
        print(f"\nüîç INICIANDO TESTE {i+1}/3: {agent_config['name']}")
        print(f"üîç Expectativa: {agent_config['expected']}")
        
        # ‚úÖ USA FUN√á√ÉO CENTRALIZADA DO META-AGENTE
        test_results = meta_agent.test_agent_pipeline(
            agent_code=agent_config['code'],
            agent_name=agent_config['name']
        )
        
        # ‚úÖ USA FUN√á√ÉO CENTRALIZADA PARA SALVAR NO HIST√ìRICO
        agent_entry = meta_agent.add_agent_to_history(
            agent_name=agent_config['name'],
            agent_code=agent_config['code'], 
            description=agent_config['description'],
            test_results=test_results,
            agent_type="manual_pipeline"
        )
        
        results.append(test_results)
        print(f"‚úÖ Agente {agent_config['name']} adicionado ao hist√≥rico")
    
    # Resumo final
    print("\n" + "="*80)
    print(f"üîç üìä RESUMO FINAL DOS TESTES ({meta_agent.DEFAULT_TEST_RUNS} EXECU√á√ïES CADA)")
    print("="*80)
    
    for i, result in enumerate(results):
        agent_name = agents[i]['name']
        print(f"ü§ñ {agent_name}:")
        print(f"   üéØ Acur√°cia: {result['accuracy']:.1f}% (¬±{result.get('accuracy_std', 0):.1f})")
        print(f"   üìä Range Acur√°cia: {result.get('accuracy_range', [0, 0])[0]:.1f}% - {result.get('accuracy_range', [0, 0])[1]:.1f}%")
        print(f"   ‚è±Ô∏è  Tempo M√©dio: {result['avg_execution_time']:.2f}s (¬±{result.get('time_std', 0):.2f})")
        print(f"   üìä Range Tempo: {result.get('time_range', [0, 0])[0]:.2f}s - {result.get('time_range', [0, 0])[1]:.2f}s")
        print(f"   ‚úÖ Execu√ß√µes OK: {result['successful_runs']}/{result['total_runs']}")
        print()
    
    print(f"üîç üéâ Processo conclu√≠do! {len(results)} agentes criados e testados {meta_agent.DEFAULT_TEST_RUNS} vezes cada.")
    print("üîç üìà Agora o meta-agente tem hist√≥rico estatisticamente confi√°vel para aprender!")

if __name__ == "__main__":
    main() 